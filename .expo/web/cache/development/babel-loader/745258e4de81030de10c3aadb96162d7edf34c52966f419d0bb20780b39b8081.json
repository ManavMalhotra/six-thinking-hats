{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport SafeAreaView from \"react-native-web/dist/exports/SafeAreaView\";\nimport FlatList from \"react-native-web/dist/exports/FlatList\";\nimport { useState, useEffect } from \"react\";\nimport { SocketManager } from \"../SocketManager\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nvar ParticipantsScreen = function ParticipantsScreen(_ref) {\n  var route = _ref.route;\n  var _useState = useState(null),\n    _useState2 = _slicedToArray(_useState, 2),\n    socket = _useState2[0],\n    setSocket = _useState2[1];\n  var _useState3 = useState(\"\"),\n    _useState4 = _slicedToArray(_useState3, 2),\n    userId = _useState4[0],\n    setUserId = _useState4[1];\n  var _useState5 = useState([]),\n    _useState6 = _slicedToArray(_useState5, 2),\n    roomUsers = _useState6[0],\n    setRoomUsers = _useState6[1];\n  var roomId = route.params.roomId;\n  useEffect(function () {\n    var socket = SocketManager.getSocket();\n    setSocket(socket);\n    setUserId(socket.id);\n    socket.on('roomData', function (roomData) {\n      setRoomUsers(roomData.users);\n    });\n    return function () {\n      socket.off('roomData');\n    };\n  }, []);\n  return _jsx(SafeAreaView, {\n    children: _jsxs(View, {\n      children: [_jsx(Text, {\n        children: \"Participants Screen\"\n      }), _jsx(FlatList, {\n        data: roomUsers,\n        keyExtractor: function keyExtractor(user) {\n          return user.id;\n        },\n        renderItem: function renderItem(_ref2) {\n          var item = _ref2.item;\n          return _jsxs(Text, {\n            children: [item.name, \" - \", item.hatRole]\n          });\n        }\n      })]\n    })\n  });\n};\nexport default ParticipantsScreen;","map":{"version":3,"names":["useState","useEffect","SocketManager","jsx","_jsx","jsxs","_jsxs","ParticipantsScreen","_ref","route","_useState","_useState2","_slicedToArray","socket","setSocket","_useState3","_useState4","userId","setUserId","_useState5","_useState6","roomUsers","setRoomUsers","roomId","params","getSocket","id","on","roomData","users","off","SafeAreaView","children","View","Text","FlatList","data","keyExtractor","user","renderItem","_ref2","item","name","hatRole"],"sources":["C:/Users/manav/projects/ironman_client/components/ParticipantsScreen.js"],"sourcesContent":["import { Text, View, SafeAreaView, FlatList } from \"react-native\";\r\nimport { useState, useEffect } from \"react\";\r\nimport { SocketManager } from \"../SocketManager\";\r\n\r\nconst ParticipantsScreen = ({ route }) => {\r\n  const [socket, setSocket] = useState(null);\r\n  const [userId, setUserId] = useState(\"\");\r\n  const [roomUsers, setRoomUsers] = useState([]);\r\n  const roomId = route.params.roomId; // Get the roomId from navigation params\r\n\r\n  useEffect(() => {\r\n    const socket = SocketManager.getSocket();\r\n    setSocket(socket);\r\n    setUserId(socket.id);\r\n\r\n    // Listen for the roomData event and update roomUsers\r\n    socket.on('roomData', (roomData) => {\r\n      setRoomUsers(roomData.users);\r\n    });\r\n\r\n    // Clean up the event listener when the component unmounts\r\n    return () => {\r\n      socket.off('roomData');\r\n    };\r\n  }, []);\r\n\r\n  return (\r\n    <SafeAreaView>\r\n      <View>\r\n        <Text>Participants Screen</Text>\r\n        <FlatList\r\n          data={roomUsers}\r\n          keyExtractor={(user) => user.id}\r\n          renderItem={({ item }) => (\r\n            <Text>{item.name} - {item.hatRole}</Text>\r\n          )}\r\n        />\r\n      </View>\r\n    </SafeAreaView>\r\n  );\r\n};\r\n\r\nexport default ParticipantsScreen;\r\n"],"mappings":";;;;;AACA,SAASA,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAC3C,SAASC,aAAa;AAA2B,SAAAC,GAAA,IAAAC,IAAA;AAAA,SAAAC,IAAA,IAAAC,KAAA;AAEjD,IAAMC,kBAAkB,GAAG,SAArBA,kBAAkBA,CAAAC,IAAA,EAAkB;EAAA,IAAZC,KAAK,GAAAD,IAAA,CAALC,KAAK;EACjC,IAAAC,SAAA,GAA4BV,QAAQ,CAAC,IAAI,CAAC;IAAAW,UAAA,GAAAC,cAAA,CAAAF,SAAA;IAAnCG,MAAM,GAAAF,UAAA;IAAEG,SAAS,GAAAH,UAAA;EACxB,IAAAI,UAAA,GAA4Bf,QAAQ,CAAC,EAAE,CAAC;IAAAgB,UAAA,GAAAJ,cAAA,CAAAG,UAAA;IAAjCE,MAAM,GAAAD,UAAA;IAAEE,SAAS,GAAAF,UAAA;EACxB,IAAAG,UAAA,GAAkCnB,QAAQ,CAAC,EAAE,CAAC;IAAAoB,UAAA,GAAAR,cAAA,CAAAO,UAAA;IAAvCE,SAAS,GAAAD,UAAA;IAAEE,YAAY,GAAAF,UAAA;EAC9B,IAAMG,MAAM,GAAGd,KAAK,CAACe,MAAM,CAACD,MAAM;EAElCtB,SAAS,CAAC,YAAM;IACd,IAAMY,MAAM,GAAGX,aAAa,CAACuB,SAAS,CAAC,CAAC;IACxCX,SAAS,CAACD,MAAM,CAAC;IACjBK,SAAS,CAACL,MAAM,CAACa,EAAE,CAAC;IAGpBb,MAAM,CAACc,EAAE,CAAC,UAAU,EAAE,UAACC,QAAQ,EAAK;MAClCN,YAAY,CAACM,QAAQ,CAACC,KAAK,CAAC;IAC9B,CAAC,CAAC;IAGF,OAAO,YAAM;MACXhB,MAAM,CAACiB,GAAG,CAAC,UAAU,CAAC;IACxB,CAAC;EACH,CAAC,EAAE,EAAE,CAAC;EAEN,OACE1B,IAAA,CAAC2B,YAAY;IAAAC,QAAA,EACX1B,KAAA,CAAC2B,IAAI;MAAAD,QAAA,GACH5B,IAAA,CAAC8B,IAAI;QAAAF,QAAA,EAAC;MAAmB,CAAM,CAAC,EAChC5B,IAAA,CAAC+B,QAAQ;QACPC,IAAI,EAAEf,SAAU;QAChBgB,YAAY,EAAE,SAAAA,aAACC,IAAI;UAAA,OAAKA,IAAI,CAACZ,EAAE;QAAA,CAAC;QAChCa,UAAU,EAAE,SAAAA,WAAAC,KAAA;UAAA,IAAGC,IAAI,GAAAD,KAAA,CAAJC,IAAI;UAAA,OACjBnC,KAAA,CAAC4B,IAAI;YAAAF,QAAA,GAAES,IAAI,CAACC,IAAI,EAAC,KAAG,EAACD,IAAI,CAACE,OAAO;UAAA,CAAO,CAAC;QAAA;MACzC,CACH,CAAC;IAAA,CACE;EAAC,CACK,CAAC;AAEnB,CAAC;AAED,eAAepC,kBAAkB"},"metadata":{},"sourceType":"module","externalDependencies":[]}